#!/usr/bin/perl

use strict;
use warnings;

use Template;
use File::Find::Rule;
use File::Path qw(make_path);
use File::Basename qw (fileparse dirname);
use File::Copy::Recursive qw(fcopy dirmove);
use File::Temp qw (tempdir);

my $out_dir = "out/";

#find all files

#rule to match git directorys
my $git = File::Find::Rule->directory
                          ->name(".git")
                          ->prune
                          ->discard;

#matches all files
my $file_rule = File::Find::Rule->file();

#combine both
my @files = File::Find::Rule->or( $git, $file_rule )
                            ->in('.');

#create a tempdir
my $tempdir = tempdir( CLEANUP => 0 );

#initialize template toolkit

my $template = Template->new;

foreach my $file (@files) {
	next if $file =~ /^$out_dir/;
	next if $file =~ /$0$/;
	if ($file =~ /\.tt2$/) {
		my $output;
		$template->process($file, undef, \$output)
			|| die "Could not process file \"$file\": $!";

		my ($name,$path,$suffix) = fileparse($file,qw (.tt2));
        make_path("$tempdir/$path") unless -d "$tempdir/$path";
		open (my $fh, '>', "$tempdir/$path/$name")
			or die "Could not write to $file: $!";
		print $fh $output;
		close($fh);
	} else {
		fcopy ($file, "$tempdir/$file") or die "Could not copy $file to $tempdir/$file: $!";
	}
}

$out_dir =~ s/\/$//;
if (-d $out_dir) {
    mv ($out_dir, dirname($out_dir) . ".bak")
        or die "Could not move $out_dir to $out_dir.bak: $!";
}
dirmove ($tempdir, "$out_dir")
    or die "Could not move $tempdir to $out_dir: $!";
